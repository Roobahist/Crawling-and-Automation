from show import show
from rounded100 import rounded
#1398/1397/1396/1392/1391/1390/1389/1388/1387/1386/1385/1384

data = {
    1398 : [1.055,1,16667,40000,0.93] ,
    1397 : [1.055,500,20000,60000,0.9193] ,
    1396 : [1.055,1000,40000,100000,0.9273] ,
    1395 : [1.055,3000,60000,130000,0.9449] ,
    1394 : [1.055,5000,80000,150000,0.9518] ,
    1393 : [1.055,10000,100000,180000,0.9528] ,
    1392 : [1.055,20000,120000,200000,0.9466] ,
    1391 : [1.055,25000,140000,230000,0.9472] ,
    1390 : [1.055,30000,160000,240000,0.9542] ,
    1389 : [1.055,40000,180000,255000,0.9964] ,
    1388 : [1.055,50000,200000,280000,0.9964912281] ,
    1387 : [1.055,60000,220000,290000,0.9969090909] ,
    1386 : [1.055,75000,240000,300000,0.9974074074] ,
    1385 : [1.055,90000,260000,310000,0.9978571429] ,
    1384 : [1.055,100000,280000,320000,0.9980769231] ,
    1383 : [1.055,105000,300000,330000,0.9864705882] ,
    1382 : [1.055,110000,320000,340000,0.9915151515] ,
    1381 : [1.055,115000,340000,350000,0.996] ,
    1380 : [1.055,120000,360000,360000,1] ,
    2018 : [1.06,1,40000,40000,1] ,
    2017 : [1.06,500,60000,60000,1] ,
    2016 : [1.06,1000,80000,100000,0.97575] ,
    2015 : [1.06,3000,100000,130000,0.97164444] ,
    2014 : [1.06,5000,120000,150000,0.975175] ,
    2013 : [1.06,10000,140000,180000,0.9717714286] ,
    2012 : [1.06,20000,160000,200000,0.9733333333] ,
    2011 : [1.06,25000,180000,230000,0.9707272727] ,
    2010 : [1.06,30000,200000,240000,0.9771515152] ,
    2009 : [1.06,40000,220000,255000,0.9805] ,
    2008 : [1.06,50000,240000,280000,0.9791333333] ,
    2007 : [1.06,60000,260000,290000,0.9843333333] ,
    2006 : [1.06,75000,280000,300000,0.9893103448] ,
    2005 : [1.06,90000,300000,310000,0.9945714286] ,
    2004 : [1.06,100000,320000,320000,1] ,
    2003 : [1.06,105000,330000,330000,1] ,
    2002 : [1.06,110000,340000,340000,1] ,
}

def kilometr(year , price , kilometr):
    ls = data[year]
    if kilometr > ls[2]:
        coef = ls[4]
        possible = (1 - coef) * price
        each_km = possible / (ls[3] - ls[2])
        km = kilometr - ls[2]
        loss = km * each_km
        answer = int(price - loss)
    elif kilometr < ls[2]:
        coef = ls[0]
        possible = (coef - 1) * price
        each_km = possible / (ls[2] - ls[1])
        km = ls[2] - kilometr
        loss = km * each_km
        answer = int(price + loss)
    elif kilometr == ls[2]:
        answer = price

    return show(rounded(answer))

    
a = kilometr(1397,47000000,11000)
print(a)


    
